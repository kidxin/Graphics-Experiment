#ifndef __BASIC_H_
#define __BASIC_H_


struct point
{
    int x,y;
};

struct slope
{
	int dx,dy;
};



struct line
{
	struct point p1,p2;
	struct slope sl;
};

struct colour
{
	float r,g,b;
};

struct colour black,red,white,green,yellow,blue;

void setcolour()
{
	black.r = 0; black.g = 0; black.b = 0;
	white.r = 1; white.g = 1; white.b = 1;
	red.r = 1; red.g = 0; red.b = 0;
	green.r = 0; green.g = 1; green.b = 0;
	blue.r = 0; blue.g = 0; blue.b = 1;
}


void swap(int *x,int *y)
{
    int i=*x;
    *x=*y;
    *y=i;
}

void swap_poi(struct point *p1,struct point *p2)
{
	struct point t=*p1;
	*p1=*p2;
	*p2=t;
}

struct point readpoint()
{
	struct point p;
	scanf("%d %d",&p.x,&p.y);
	return p;
}

struct line readline()
{
	struct line l;
	l.p1=readpoint();
	l.p2=readpoint();
	return l;	
}

int comp_slope(const void *a,const void *b)
{
	int t1 = ((struct slope *)a)->dx * ((struct slope *)b)->dy;
	int t2 = ((struct slope *)a)->dy * ((struct slope *)b)->dx;
	int t3 = ((struct slope *)a)->dx * ((struct slope *)b)->dx;
	if (t3 < 0) return ((struct slope *)a)->dx - ((struct slope *)b)->dx;
	else return t2-t1;
}

void cal_sl(struct line *l)
{
	l->sl.dx=l->p1.x-l->p2.x;
	l->sl.dy=l->p1.y-l->p2.y;
	if (l->sl.dy<0) 
	{
		l->sl.dx = -l->sl.dx;
		l->sl.dy = -l->sl.dy;
	}
}

int delta_x(struct slope slo,int y)
{
	int x = y*(float)slo.dx/slo.dy;
	if (abs(x*slo.dy-slo.dx*y)>abs((x-1)*slo.dy-slo.dx*y)) --x;
	if (abs(x*slo.dy-slo.dx*y)>abs((x+1)*slo.dy-slo.dx*y)) ++x;
	return x;
}

void test_line(struct line l)
{
	printf("%d %d %d %d\n",l.p1.x,l.p1.y,l.p2.x,l.p2.y);
}

void drawline(struct line l,struct colour c)
{
	struct point p1=l.p1, p2=l.p2;
    int dx,dy,sx,sy,change;
    dx=abs(p1.x-p2.x);
    dy=abs(p1.y-p2.y);
    if (p2.x>p1.x) sx=1; else sx=-1;
    if (p2.y>p1.y) sy=1; else sy=-1;
    if (dy>dx) 
    {
	swap(&dx,&dy);
	change=1;
    }
    else change=0;
    int diff=2*dy-dx,i;
    for (i=0;i<dx;i++)
    {	
    	glColor3f(c.r,c.g,c.b);
		glVertex2i(p1.x,p1.y);
		while (diff>0)
		{
			if (change) p1.x=p1.x+sx; else p1.y=p1.y+sy;
			diff=diff-2*dx;
		}
		if (change) p1.y=p1.y+sy; else p1.x=p1.x+sx;
		diff=diff+2*dy;
    }
}

void draw4p(struct point center,struct point tar)
{
    glVertex2i(center.x+tar.x,center.y+tar.y);
    glVertex2i(center.x-tar.x,center.y+tar.y);
    glVertex2i(center.x+tar.x,center.y-tar.y);
    glVertex2i(center.x-tar.x,center.y-tar.y);
}

void draw8p(struct point center,struct point tar)
{
    draw4p(center,tar);
    swap(&tar.x,&tar.y);
    draw4p(center,tar);
}

#endif
